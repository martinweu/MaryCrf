from itertools import product
import numpy as np
from scipy.optimize import minimize
import pickle
import time   
from marycrf import *


sample_y = np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3, 3, 3, 2, 3, 3, 3, 2, 1, 1, 1, 1,
       1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
       0, 0, 0, 1, 1])

sample_x = np.array([[0, 0, 0, 0, 1, 2, 2, 0, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 2,
        1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 1, 1, 2, 2, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 2, 2],
       [2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 0, 1, 2, 2, 2, 1, 0, 2, 2, 1, 0, 2,
        1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2,
        1, 2, 2, 2, 0, 2],
       [2, 0, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 1, 0,
        2, 2, 2, 2, 2, 2]])

cweights = np.array([ -1.05359405e-01,  -2.30257509e+00,  -1.38155106e+01,
        -1.60943291e+00,  -2.99571227e+00,  -9.16288232e-01,
         9.99999500e-07,  -2.30257509e+00,  -2.99571227e+00,
        -6.93145181e-01,  -1.38155106e+01,  -3.56673515e-01,
        -2.30257509e+00,  -2.30257509e+00,  -1.38155106e+01,
        -9.16288232e-01,  -2.30257509e+00,  -1.20396947e+00,
        -2.30257509e+00,  -9.16288232e-01,  -2.23142301e-01,
        -5.10823957e-01,  -1.05359405e-01,  -1.60943291e+00,
        -1.60943291e+00,  -1.60943291e+00,  -1.60943291e+00,
        -1.60943291e+00,  -2.30257509e+00,  -2.30257509e+00,
        -2.30257509e+00,  -2.30257509e+00,  -3.56673515e-01,
        -3.56673515e-01,  -3.56673515e-01,  -3.56673515e-01,
        -2.23142301e-01,  -1.60943291e+00,  -1.38155106e+01,
        -1.38155106e+01,  -1.60943291e+00,  -5.10823957e-01,
        -1.60943291e+00,  -1.38155106e+01,  -1.38155106e+01,
        -9.16288232e-01,  -1.60943291e+00,  -9.16288232e-01,
        -1.38155106e+01,  -1.38155106e+01,  -9.16288232e-01,
        -5.10823957e-01])

forward_res = np.array([[  1.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00],
       [  9.79591509e-01,   2.04084229e-02,   1.53060791e-12,
          6.80276227e-08],
       [  9.78453371e-01,   2.15465447e-02,   1.26759940e-08,
          7.18213792e-08],
       [  9.78388936e-01,   2.16109783e-02,   1.33935460e-08,
          7.23862780e-08],
       [  9.78385285e-01,   2.16146292e-02,   1.34342041e-08,
          7.24327945e-08],
       [  1.31889107e-01,   8.39129527e-01,   2.89799608e-02,
          1.40606478e-06],
       [  6.31084282e-02,   9.27521181e-01,   1.77372844e-06,
          9.36861751e-03],
       [  5.21630303e-02,   9.43485139e-01,   1.86375754e-06,
          4.34996731e-03],
       [  5.42279209e-01,   4.52256433e-01,   9.91375572e-07,
          5.46336675e-03],
       [  1.54914553e-01,   8.41692738e-01,   1.21721931e-06,
          3.39149145e-03],
       [  2.62955026e-02,   2.89336967e-01,   6.84275925e-01,
          9.16055859e-05],
       [  4.24983899e-03,   1.70043435e-01,   2.72124012e-12,
          8.25706726e-01],
       [  1.21197020e-03,   9.99857983e-02,   2.58072745e-07,
          8.98801973e-01],
       [  8.88391578e-03,   1.91405712e-01,   3.80856191e-06,
          7.99706563e-01],
       [  4.58250702e-03,   7.06438086e-02,   9.00552165e-01,
          2.42215191e-02],
       [  5.92205208e-03,   5.57596375e-01,   1.63267759e-06,
          4.36479940e-01],
       [  4.67767913e-03,   4.05252896e-01,   3.19970815e-07,
          5.90069105e-01],
       [  3.79364773e-03,   1.09202483e-01,   3.56233717e-12,
          8.87003870e-01],
       [  2.57670128e-03,   4.11917843e-02,   9.28668853e-01,
          2.75626618e-02],
       [  1.64343369e-03,   2.01947884e-01,   7.65456550e-01,
          3.09521327e-02],
       [  2.94640528e-03,   4.65571106e-01,   3.47938956e-01,
          1.83543533e-01],
       [  5.43964645e-03,   1.99139866e-01,   3.75159183e-12,
          7.95420487e-01],
       [  1.68703806e-02,   3.45299168e-01,   3.41789235e-06,
          6.37827034e-01],
       [  5.13984312e-03,   3.14602433e-01,   4.89652640e-01,
          1.90605084e-01],
       [  6.19271199e-01,   2.21505328e-01,   3.46450867e-06,
          1.59220008e-01],
       [  9.52854199e-01,   3.77752559e-02,   3.36081644e-07,
          9.37020893e-03],
       [  9.77050577e-01,   2.25528997e-02,   2.99192612e-08,
          3.96493312e-04],
       [  9.78315279e-01,   2.16681894e-02,   1.42810633e-08,
          1.65170968e-05],
       [  9.78381356e-01,   2.16178766e-02,   1.34807453e-08,
          7.53934906e-07],
       [  9.78384866e-01,   2.16150203e-02,   1.34389897e-08,
          1.00677739e-07],
       [  3.52384265e-01,   5.60505819e-01,   8.71096773e-02,
          2.38594234e-07],
       [  4.69446050e-02,   3.03247176e-01,   6.47732412e-01,
          2.07580640e-03],
       [  7.04438529e-01,   1.91812263e-01,   2.25661250e-06,
          1.03746952e-01],
       [  9.60443731e-01,   3.40376995e-02,   2.35806938e-07,
          5.51833377e-03],
       [  9.77437237e-01,   2.23307161e-02,   2.49405765e-08,
          2.32021962e-04],
       [  3.34143296e-01,   6.65648091e-01,   8.62886786e-08,
          2.08526490e-04],
       [  2.36708932e-02,   6.61396317e-01,   3.14873135e-01,
          5.96544087e-05],
       [  8.01829400e-03,   5.91169997e-01,   3.47369271e-01,
          5.34424374e-02],
       [  3.18268302e-02,   8.15345698e-01,   1.88039230e-06,
          1.52825591e-01],
       [  4.46100225e-02,   8.79448803e-01,   2.06174897e-06,
          7.59391132e-02],
       [  1.75551693e-02,   2.67129288e-01,   7.13425227e-01,
          1.89031582e-03],
       [  6.19408066e-01,   2.34464508e-01,   2.87223168e-06,
          1.46124554e-01],
       [  9.52720231e-01,   3.87239360e-02,   3.34240956e-07,
          8.55549841e-03],
       [  9.77030609e-01,   2.26073812e-02,   3.00004444e-08,
          3.61980135e-04],
       [  9.78313632e-01,   2.16712687e-02,   1.42935562e-08,
          1.50855130e-05],
       [  9.18785198e-01,   8.12043543e-02,   1.12538377e-08,
          1.04366794e-05],
       [  9.74859972e-01,   2.51394510e-02,   5.26943639e-08,
          5.23845015e-07],
       [  9.78184825e-01,   2.18150666e-02,   1.56666161e-08,
          9.24558690e-08],
       [  9.78373718e-01,   2.16261954e-02,   1.35630214e-08,
          7.33377767e-08],
       [  2.73884980e-01,   7.26094569e-01,   6.02127499e-13,
          2.04507326e-05],
       [  9.01226920e-02,   9.09864202e-01,   1.61652493e-06,
          1.14891699e-05]])

forward_backward_res = np.array([[  1.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00],
       [  9.94495876e-01,   5.50412423e-03,   8.90667688e-15,
          3.97895458e-12],
       [  9.93984443e-01,   6.01555713e-03,   1.27927727e-10,
          9.92128187e-11],
       [  9.90433976e-01,   9.56602028e-03,   1.22064595e-09,
          2.41080972e-09],
       [  9.28086859e-01,   7.19130652e-02,   1.76545563e-08,
          5.82119825e-08],
       [  6.07135216e-02,   9.25213190e-01,   1.40730214e-02,
          2.66844816e-07],
       [  3.45925434e-02,   9.61739327e-01,   1.04325006e-06,
          3.66708624e-03],
       [  6.51700649e-02,   9.31160268e-01,   1.50495243e-06,
          3.66816238e-03],
       [  2.89199951e-01,   7.07128496e-01,   9.59638653e-07,
          3.67059424e-03],
       [  8.66273281e-03,   9.87664415e-01,   7.22805600e-07,
          3.67212899e-03],
       [  4.08840580e-03,   1.19865101e-01,   8.75889365e-01,
          1.57128188e-04],
       [  1.87060344e-03,   2.15493017e-01,   2.86467028e-12,
          7.82636379e-01],
       [  9.04405175e-04,   2.16460640e-01,   3.35469746e-07,
          7.82634619e-01],
       [  7.02989257e-04,   2.16665145e-01,   2.12781271e-06,
          7.82629738e-01],
       [  9.24797797e-04,   3.66356075e-02,   9.31061358e-01,
          3.13782366e-02],
       [  7.02391919e-04,   1.90160928e-01,   2.20261163e-06,
          8.09134477e-01],
       [  7.80759135e-04,   1.90081063e-01,   3.42228139e-07,
          8.09137836e-01],
       [  1.22125013e-03,   1.89640151e-01,   2.65250645e-12,
          8.09138598e-01],
       [  1.21518330e-03,   9.37339014e-02,   8.74977713e-01,
          3.00732024e-02],
       [  1.00077580e-03,   4.15469275e-01,   5.72800437e-01,
          1.07295123e-02],
       [  1.90639191e-03,   7.85850559e-01,   2.03785223e-01,
          8.45782586e-03],
       [  1.09851728e-02,   9.69869296e-01,   6.01557605e-12,
          1.91455315e-02],
       [  2.38593294e-02,   9.57001269e-01,   3.01919290e-06,
          1.91363821e-02],
       [  5.63373436e-02,   9.14172846e-01,   2.94870206e-02,
          2.78991491e-06],
       [  9.13387144e-01,   8.66124799e-02,   2.80778801e-08,
          3.47877723e-07],
       [  9.89598184e-01,   1.04017656e-02,   1.92220015e-09,
          4.86879401e-08],
       [  9.93906138e-01,   6.09382554e-03,   1.74691318e-10,
          3.62952358e-08],
       [  9.93964335e-01,   6.03562859e-03,   1.48197777e-10,
          3.59320612e-08],
       [  9.90686720e-01,   9.31323920e-03,   1.34243103e-09,
          3.95536108e-08],
       [  9.32600612e-01,   6.73992443e-02,   1.64380048e-08,
          1.27457545e-07],
       [  3.58174435e-01,   6.14592167e-01,   2.72333872e-02,
          1.10341841e-08],
       [  3.58017305e-01,   6.14051032e-01,   2.79313698e-02,
          2.92822407e-07],
       [  9.30913463e-01,   6.90295284e-02,   2.50390445e-08,
          5.69840071e-05],
       [  9.86211160e-01,   1.37320205e-02,   1.41998580e-08,
          5.68051137e-05],
       [  9.43249990e-01,   5.66931732e-02,   2.49083242e-08,
          5.68121282e-05],
       [  1.27351429e-01,   8.72591304e-01,   4.39856716e-08,
          5.72227288e-05],
       [  9.06187585e-03,   8.46238181e-01,   1.44687934e-01,
          1.20089086e-05],
       [  4.62561773e-03,   8.32362566e-01,   1.62378564e-01,
          6.33252172e-04],
       [  1.82811821e-02,   9.78341719e-01,   7.49978685e-07,
          3.37634918e-03],
       [  4.48424033e-02,   9.51780983e-01,   6.35483901e-07,
          3.37597789e-03],
       [  1.90212111e-01,   7.67317292e-01,   4.24705689e-02,
          2.72389590e-08],
       [  9.08798467e-01,   9.12012210e-02,   2.31652268e-08,
          2.89211271e-07],
       [  9.89333778e-01,   1.06662044e-02,   1.92500642e-09,
          1.60611677e-08],
       [  9.93845662e-01,   6.15433337e-03,   1.95802772e-10,
          4.73670334e-09],
       [  9.93190125e-01,   6.80987001e-03,   3.16818225e-10,
          4.28245687e-09],
       [  9.77072341e-01,   2.29276541e-02,   7.08679413e-11,
          4.73557858e-09],
       [  9.93032224e-01,   6.96776991e-03,   7.98631790e-10,
          5.47872311e-09],
       [  9.91405443e-01,   8.59453051e-03,   3.43011206e-09,
          2.32740069e-08],
       [  9.46645473e-01,   5.33540161e-02,   6.58950293e-08,
          4.45446161e-07],
       [  1.55824257e-01,   8.44165119e-01,   4.31940176e-13,
          1.06235043e-05],
       [  9.01226920e-02,   9.09864202e-01,   1.61652493e-06,
          1.14891699e-05]])

viterbi_res = (np.array([0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3, 3, 3, 2, 3, 3, 3, 2, 2, 1, 1, 1,
        1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1]),
 np.array([[  1.00000000e+00,   0.00000000e+00,   0.00000000e+00,
           0.00000000e+00],
        [  9.79591509e-01,   2.04084229e-02,   1.53060791e-12,
           6.80276227e-08],
        [  9.79591497e-01,   2.04084226e-02,   1.27552641e-08,
           6.80276219e-08],
        [  9.79591497e-01,   2.04084226e-02,   1.27552641e-08,
           6.80276219e-08],
        [  9.79591497e-01,   2.04084226e-02,   1.27552641e-08,
           6.80276219e-08],
        [  1.38730508e-01,   8.32366052e-01,   2.89020534e-02,
           1.38727906e-06],
        [  4.21183339e-02,   9.47642692e-01,   1.89528212e-06,
           1.02370787e-02],
        [  4.23495524e-02,   9.52844999e-01,   1.90568672e-06,
           4.80354278e-03],
        [  4.96661346e-01,   4.96660794e-01,   1.10368790e-06,
           6.67675564e-03],
        [  1.50145719e-01,   8.44554236e-01,   1.68910556e-06,
           5.29835590e-03],
        [  1.56230303e-02,   2.81208804e-01,   7.03021150e-01,
           1.47016458e-04],
        [  3.21552695e-03,   9.64637506e-02,   1.60771328e-12,
           9.00320722e-01],
        [  6.02795107e-04,   5.42500406e-02,   2.25036539e-07,
           9.45146939e-01],
        [  4.84429184e-03,   1.08994287e-01,   3.79780136e-06,
           8.86157624e-01],
        [  2.51856728e-03,   4.53332855e-02,   9.21433332e-01,
           3.07148147e-02],
        [  3.38159106e-03,   5.15491415e-01,   1.54647029e-06,
           4.81125447e-01],
        [  4.03562732e-03,   3.63196289e-01,   1.61421461e-07,
           6.32767922e-01],
        [  3.08943527e-03,   9.26810808e-02,   2.15292068e-12,
           9.04229484e-01],
        [  2.11568355e-03,   3.80815264e-02,   9.28841048e-01,
           3.09617415e-02],
        [  1.38789221e-03,   2.03107808e-01,   7.61652716e-01,
           3.38515835e-02],
        [  4.42488179e-03,   3.98228919e-01,   3.31859147e-01,
           2.65487052e-01],
        [  6.99317652e-03,   2.09790820e-01,   2.79717970e-12,
           7.83216003e-01],
        [  1.59492603e-02,   3.58850850e-01,   2.67940460e-06,
           6.25197211e-01],
        [  5.42012043e-03,   3.90237940e-01,   3.77713618e-01,
           2.26628322e-01],
        [  7.36621309e-01,   1.84156427e-01,   1.84154637e-06,
           7.92204224e-02],
        [  9.75310153e-01,   2.03192268e-02,   1.52393122e-07,
           4.37046733e-03],
        [  9.79412425e-01,   2.04046919e-02,   1.27529324e-08,
           1.82870225e-04],
        [  9.79584098e-01,   2.04082685e-02,   1.27551678e-08,
           7.62098966e-06],
        [  9.79591252e-01,   2.04084175e-02,   1.27552610e-08,
           3.17546113e-07],
        [  9.79591497e-01,   2.04084226e-02,   1.27552641e-08,
           6.80276219e-08],
        [  3.65717029e-01,   5.48568229e-01,   8.57145143e-02,
           2.28571429e-07],
        [  4.05139374e-02,   2.73460874e-01,   6.83651349e-01,
           2.37384018e-03],
        [  6.54543010e-01,   1.63636730e-01,   2.04544185e-06,
           1.81818215e-01],
        [  9.68609317e-01,   2.01796242e-02,   1.68161998e-07,
           1.12108902e-02],
        [  9.79129003e-01,   2.03987872e-02,   1.27492420e-08,
           4.72197440e-04],
        [  3.47676106e-01,   6.51883682e-01,   8.14861121e-08,
           4.40130648e-04],
        [  1.86895854e-02,   6.30749801e-01,   3.50418659e-01,
           1.41954859e-04],
        [  8.20439279e-03,   5.90700036e-01,   3.28168656e-01,
           7.29269149e-02],
        [  3.65117823e-02,   8.21497918e-01,   1.64299301e-06,
           1.41988657e-01],
        [  3.95032488e-02,   8.88804506e-01,   1.77760595e-06,
           7.16904674e-02],
        [  1.55958439e-02,   2.80719458e-01,   7.01797788e-01,
           1.88690980e-03],
        [  6.54543010e-01,   1.63636730e-01,   2.04544185e-06,
           1.81818215e-01],
        [  9.68609317e-01,   2.01796242e-02,   1.68161998e-07,
           1.12108902e-02],
        [  9.79129003e-01,   2.03987872e-02,   1.27492420e-08,
           4.72197440e-04],
        [  9.79572281e-01,   2.04080223e-02,   1.27550139e-08,
           1.96839593e-05],
        [  9.23065075e-01,   7.69225490e-02,   1.06837645e-08,
           1.23656128e-05],
        [  9.79590990e-01,   2.04084121e-02,   5.10206688e-08,
           5.46789748e-07],
        [  9.79591497e-01,   2.04084226e-02,   1.27552641e-08,
           6.80276219e-08],
        [  9.79591497e-01,   2.04084226e-02,   1.27552641e-08,
           6.80276219e-08],
        [  2.85711480e-01,   7.14268521e-01,   5.95222908e-13,
           1.99992572e-05],
        [  6.63910549e-02,   9.33594879e-01,   1.86718654e-06,
           1.21988473e-05]]))

class TestMary(object):
    """Class to test edge-case foreign key conditions, using a database
    explicitly built to contain these cases."""
    def setup_method(self, _):
        """Grab the database file from the *data* directory and configure the
        app."""
        
        pi = array([1, 0, 0, 0])
        
        # hidden states: 0 = absent, 1 = sleigh, 2 = chimney, 3 = christmas tree
        A = array([[0.8, 0.2, 0.0, 0.0],
                   [0.2, 0.6, 0.2, 0.0],
                   [0.0, 0.4, 0.2, 0.4],
                   [0.0, 0.0, 0.4, 0.6]])
        
        #A = np.ones((4,4)) * (1.0/4)
        
        # observation probabilites: noise (0 = silence, 1 = rumbling, 2 = crackle)
        B1 = array([[0.9,  0.1, 0.0, 0.2],
                    [0.05, 0.4, 1.0, 0.1],
                    [0.05, 0.5, 0.0, 0.7]])
        # observation probabilities: light (0 = bright light, 1 = dimmed light, 2 = dark)
        B2 = array([[0.1, 0.1, 0.0, 0.4],
                    [0.1, 0.3, 0.1, 0.4],
                    [0.8, 0.6, 0.9, 0.2]])
        # observation probabilities: smell (0 = cinnamon, 1 = popcorn, 2 = no particular smell)
        B3 = array([[0.2, 0.2, 0.2, 0.2],
                    [0.1, 0.1, 0.1, 0.1],
                    [0.7, 0.7, 0.7, 0.7]])
        
        
        # observation probabilites: noise (0 = silence, 1 = rumbling, 2 = crackle)
        B1G = array([[1.0,  2.0, 3.0, 4.0],
                    [0.5, 0.5, 0.5, 0.5]])
        # observation probabilities: light (0 = bright light, 1 = dimmed light, 2 = dark)
        B2G = array([[1.0,  2.0, 3.0, 4.0],
                    [0.5, 0.5, 0.5, 0.5]])
        # observation probabilities: smell (0 = cinnamon, 1 = popcorn, 2 = no particular smell)
        B3G = array([[1.0,  2.0, 3.0, 4.0],
                    [0.5, 0.5, 0.5, 0.5]])
                
        
        obsIndex = np.array(list(np.ndindex((3,3,4))))
        transIndex = np.array(list(np.ndindex((4,4))))
        cweights = np.log(np.concatenate((B1.flatten(),B2.flatten(),B3.flatten(),A.flatten()))+0.000001)  # To avoid Problems with np.log(0) = -Inf and Weight = 0 --> -Inf * 0 = Nan

        cyObsFuncs = [FeatureFunctionObservation(x[2],x[0],x[1]) for x in obsIndex]
        cyTransFuncs = [FeatureFunctionTransition(x[1], x[0]) for x in transIndex]
        cyFeatureFuncs = np.array(cyObsFuncs + cyTransFuncs)
        self.cycrf = CyCRF(len(pi),cyFeatureFuncs)
        self.cycrf.pi = pi *1.0;
        self.cycrf.weights = cweights;
    

    def test_forward(self):
        res = np.array(self.cycrf.forward(sample_x*1.0,1))
        assert np.all(np.abs(res - forward_res) <= 0.00001) 
        
    def test_forward_backward(self):
        res = np.array(self.cycrf.forward_backward(sample_x*1.0))
        assert np.all(np.abs(res - forward_backward_res) <= 0.00001)
        
    def test_viterbi(self):
        res = self.cycrf.viterbi(sample_x*1.0)
        assert np.all(np.abs(res[0] - viterbi_res[0]) <= 0.00001)
        assert np.all(np.abs(res[1] - viterbi_res[1]) <= 0.00001)
        

